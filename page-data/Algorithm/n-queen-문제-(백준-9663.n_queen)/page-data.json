{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/n-queen-문제-(백준-9663.n_queen)/","result":{"data":{"site":{"siteMetadata":{"title":"Mootata's blog","author":"Mootata","siteUrl":"https://github.com/Mootata/mootata.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fde235b3-29ce-5b40-9bec-548269e0c52c","excerpt":"알고리즘 공부를 시작하면서 여러 문제를 풀게 될 텐데 앞으로 문제를 풀다가 기억해두고 싶은 것이 생길 때마다 하나씩 블로그에 포스팅해 볼 예정입니다. N Queen 문제 백준 9663.N_Queen 바로가기{:target=”_blank”}\nN Queen 문제는 백트래킹으로 풀이하는 대표적인 문제입니다. 위의 코드가 처음에 구현했던 것인데 실행해 보니 체스판의 크기가 1…","html":"<p>알고리즘 공부를 시작하면서 여러 문제를 풀게 될 텐데 앞으로 문제를 풀다가 기억해두고 싶은 것이 생길 때마다 하나씩 블로그에 포스팅해 볼 예정입니다.</p>\n<h2 id=\"n-queen-문제\" style=\"position:relative;\"><a href=\"#n-queen-%EB%AC%B8%EC%A0%9C\" aria-label=\"n queen 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>N Queen 문제</h2>\n<p><a href=\"https://www.acmicpc.net/problem/9663\">백준 9663.N_Queen 바로가기</a>{:target=”_blank”}\nN Queen 문제는 백트래킹으로 풀이하는 대표적인 문제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">n_queen</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># i는 현재 행을 의미</span>\n    <span class=\"token keyword\">global</span> case\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 현재 행이 마지막 행인 경우, = 탐색이 모두 끝났다는 뜻</span>\n        case <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 각 열에 퀸을 놓는 경우의 수를 확인</span>\n        col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j <span class=\"token comment\"># i행 j열에 퀸을 놓음</span>\n        <span class=\"token keyword\">if</span> promising<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># i행 j열에 퀸을 놓는 경우 유망한지 확인 (겹치는 퀸이 있는지 확인)</span>\n            n_queen<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 겹치는 퀸이 없다면 다음 행으로 이동 해서 다시 각 열에 퀸을 놓는 경우를 확인</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">promising</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 퀸이 다른 퀸을 공격할 수 있는지 확인 i는 행</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                        <span class=\"token comment\"># col[i] == col[j] -> 같은 열에 놓이는 경우</span>\n        <span class=\"token keyword\">if</span> col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">:</span> <span class=\"token comment\"># abs(col[i] - col[j]) == i - j 열의 차이의 절대값과 행의차이가 같다면</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>                                      <span class=\"token comment\"># 같은 대각선에 놓였다는 뜻</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># 위의 조건식이 만족되지 않는다면 유망하다고 판단 True 리턴</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># n x n 크기의 체스판 위에 n개의 퀸</span>\ncase <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># N개의 퀸이 서로 공격할 수 없게 놓는 경우의 수</span>\ncol<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n <span class=\"token comment\"># 깊이가 n인 트리 생성, col[i] = j 는 i행 j열에 퀸을 놓았다는 뜻(j가 0인 경우 비어있는 칸)</span>\nn_queen<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>case<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드가 처음에 구현했던 것인데 실행해 보니 체스판의 크기가 13을 넘어가면 시간이 상당히 오래 걸리는 것을 볼 수 있었고, 아니나 다를까 제출 결과는 시간 초과였습니다..</p>\n<p>따라서 이번 포스팅에서는 N Queen 문제의 최적화에 대해서 써보려고 합니다.</p>\n<h2 id=\"n-queen-문제의-특징\" style=\"position:relative;\"><a href=\"#n-queen-%EB%AC%B8%EC%A0%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"n queen 문제의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>N Queen 문제의 특징</h2>\n<ul>\n<li><strong>N이 짝수일 경우</strong>\n<img src=\"https://user-images.githubusercontent.com/75708329/148212001-a7f26e89-2cf3-4b09-b3f5-5933bfa32e29.PNG\" alt=\"4queens\">\n위의 그림처럼 N Queen 문제에서는 N이 짝수일 경우, N개의 퀸이 서로 공격할 수 없도록 놓는 경우가 대칭이 되는 것을 알 수 있습니다. 따라서 N이 짝수인 경우에는 왼쪽 절반의 경우의 수 * 2를 한다면 연산의 수를 줄이면서 답을 구할 수 있게 됩니다.</li>\n</ul>\n<p>-<strong>N이 홀수일 경우</strong>\n<img src=\"https://user-images.githubusercontent.com/75708329/148225274-1c3c051f-095f-4bbf-a152-e9be3726e90c.png\" alt=\"5queens\">\nN이 홀수인 경우에도 비슷하게 진행합니다. 다만, 가운뎃 줄을 제외하고 짝수일 때와 같이 왼쪽 절반의 경우의 수 * 2 로 경우의 수를 구합니다. 이후 시도하지 않았던 가운뎃 줄의 경우의 수도 찾아줍니다. 예를 들어 N이 5일 때 퀸이 (1,1)과 (1,2)에 놓이는 경우의 수를 모두 구하고 그 값에 2를 곱한 뒤, 퀸이 (1,3)에 놓이는 경우의 수를 더해주는 겁니다. (N x N 크기의 체스판에 N개의 퀸을 서로 공격할 수 없게 두기 위해서는 반드시 퀸이 한 줄에 한 개씩 놓여야 한다는 것이 이 방식을 이해하는 데 도움이 될 수도 있을 것 같습니다.) 다시 한번 정리해보면 (1,2)와 (1,3)에 놓이는 경우의 수에 2를 곱함으로써 (1,4)와 (1,5)에 놓이는 경우의 수까지 구할 수 있고, 마지막에 (1,3)에 놓이는 경우의 수를 더해 줌으로서 모든 경우의 수를 구할 수 있게 됩니다.</p>\n<p>위의 특징들을 이용해 다시 문제를 풀어보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">다시푼 코드</code></pre></div>","frontmatter":{"title":"N Queen 문제 (백준 9663.N_Queen with python)","date":"January 04, 2022"}}},"pageContext":{"slug":"/Algorithm/n-queen-문제-(백준-9663.n_queen)/","previous":null,"next":null}},"staticQueryHashes":["2486386679","3128451518"]}